{"version":3,"sources":["scripts/main.js"],"names":["container","document","querySelector","gameField","header","startButton","startMessage","loseMessage","winMessage","score","Game","size","field","i","j","row","column","fieldCell","rows","cells","classList","add","textContent","remove","freeCells","emptyCell","emptyCount","length","Math","floor","random","addEventListener","createMatrix","generateRandomNumber","renderField","window","e","preventDefault","key","makeMove","startEvents","moveEvents","rotate","back","prev","map","concat","rotateMatrix","moveCell","mergeSameCell","hasChanges","canMove","curr","join","degree","_","rowIndex","reverse","hasMoved","can","empty","push","game","initGame"],"mappings":"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","file":"main.be0b8807.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// <---------- getting elements ----------> \\\\\nconst container = document.querySelector('.container');\nconst gameField = container.querySelector('.game-field');\nconst header = container.querySelector('.controls');\nconst startButton = header.querySelector('.start');\nconst startMessage = container.querySelector('.message-start');\nconst loseMessage = container.querySelector('.message-lose');\nconst winMessage = container.querySelector('.message-win');\nconst score = header.querySelector('.game-score');\n\nclass Game {\n  constructor() {\n    this.size = 4;\n    this.field = [[], [], [], []];\n  }\n\n  // <---------- creating a field for the game ----------> \\\\\n  createMatrix() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < 4; j++) {\n        this.field[i][j] = 0;\n      }\n    }\n  }\n\n  // <---------- render of the field for the game ----------> \\\\\n  renderField() {\n    for (let row = 0; row < this.size; row++) {\n      for (let column = 0; column < this.size; column++) {\n        const fieldCell = gameField.rows[row].cells[column];\n\n        fieldCell.classList = ['field-cell'];\n\n        if (this.field[row][column] > 0) {\n          fieldCell.classList.add(`field-cell--${this.field[row][column]}`);\n          fieldCell.textContent = `${this.field[row][column]}`;\n        } else {\n          fieldCell.textContent = '';\n        }\n\n        if (this.field[row][column] === 2048) {\n          winMessage.classList.remove('hidden');\n        }\n      }\n    }\n  }\n\n  // <---------- getting empty cells to work with ----------> \\\\\n  get emptyCell() {\n    const empty = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.field[i][j] === 0) {\n          empty.push([i, j]);\n        }\n      }\n    }\n\n    return empty;\n  }\n\n  // <---------- generate random number for a random free cell ----------> \\\\\n  generateRandomNumber() {\n    const freeCells = this.emptyCell;\n    const emptyCount = freeCells.length;\n\n    const [row, column] = freeCells[Math.floor(Math.random() * emptyCount)];\n\n    this.field[row][column] = Math.random() <= 0.1 ? 4 : 2;\n  }\n\n  // <---------- add an event to the start button ----------> \\\\\n  startEvents() {\n    startButton.addEventListener('click', () => {\n      startMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n      winMessage.classList.add('hidden');\n\n      startButton.classList.remove('start');\n      startButton.classList.add('restart');\n      startButton.textContent = 'Restart';\n      score.textContent = 0;\n\n      this.createMatrix(this.size);\n      this.generateRandomNumber();\n      this.generateRandomNumber();\n      this.renderField();\n    });\n  }\n\n  // <---------- creating an event for the arrow keys ----------> \\\\\n  moveEvents() {\n    window.addEventListener('keydown', (e) => {\n      e.preventDefault();\n\n      switch (e.key) {\n        case 'ArrowUp':\n          this.makeMove(0, 0);\n          break;\n        case 'ArrowLeft':\n          this.makeMove(90, -90);\n          break;\n        case 'ArrowDown':\n          this.makeMove(180, -180);\n          break;\n        case 'ArrowRight':\n          this.makeMove(270, -270);\n          break;\n      }\n    });\n  }\n\n  // <---------- game initialization ----------> \\\\\n  initGame() {\n    this.startEvents();\n    this.moveEvents();\n  }\n\n  // <-------- method for performing a movement in four directions --------> \\\\\n  makeMove(rotate, back) {\n    const prev = this.field.map(row => row.concat());\n\n    this.rotateMatrix(rotate);\n    this.moveCell();\n    this.mergeSameCell();\n    this.rotateMatrix(back);\n    this.renderField();\n\n    // <---------- if there are changes add a random number ----------> \\\\\n    if (this.hasChanges(prev, this.field)) {\n      this.generateRandomNumber();\n      this.renderField();\n    }\n\n    // <------- if there are no moves, show a message about the loss -------> \\\\\n    if (!this.canMove(0, 0) && !this.canMove(90, -90)\n    && !this.canMove(180, -180) && !this.canMove(270, -270)) {\n      loseMessage.classList.remove('hidden');\n    }\n  }\n\n  // <---------- check if there were any changes ----------> \\\\\n  hasChanges(prev, curr) {\n    if (prev.join() !== curr.join()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // <---------- rotate the matrix in the desired direction ----------> \\\\\n  rotateMatrix(degree) {\n    switch (degree) {\n      case 90:\n      case -270:\n        this.field = this.field.map((_, rowIndex) =>\n          this.field.map((row) => row[rowIndex]).reverse()\n        );\n        break;\n      case 180:\n      case -180:\n        this.field = this.field.map((row) => row.reverse()).reverse();\n        break;\n      case 270:\n      case -90:\n        this.field = this.field.map((_, rowIndex) =>\n          this.field.map((row) => [...row].reverse()[rowIndex])\n        );\n        break;\n      case 0:\n        return this.field;\n    }\n  }\n\n  // <---------- method for merge cell ----------> \\\\\n  mergeSameCell() {\n    for (let row = 1; row < this.size; row++) {\n      for (let column = 0; column < this.size; column++) {\n        if (this.field[row - 1][column] === this.field[row][column]\n          && this.field[row][column] > 0) {\n          this.field[row - 1][column] += this.field[row][column];\n          this.field[row][column] = 0;\n\n          score.textContent = +score.textContent + this.field[row - 1][column];\n        }\n      }\n    }\n    this.moveCell();\n  }\n\n  // <---------- method for making movement ----------> \\\\\n  moveCell() {\n    let hasMoved = false;\n\n    for (let row = 1; row < this.size; row++) {\n      for (let column = 0; column < this.size; column++) {\n        if (this.field[row - 1][column] === 0\n          && this.field[row][column] > 0) {\n          this.field[row - 1][column] = this.field[row][column];\n          this.field[row][column] = 0;\n\n          hasMoved = true;\n        }\n      }\n    }\n\n    if (hasMoved) {\n      return this.moveCell();\n    }\n  }\n\n  // <---------- method for checking available movements ----------> \\\\\n  canMove(rotate, back) {\n    let can = false;\n\n    for (let row = 1; row < this.size; row++) {\n      for (let column = 0; column < this.size; column++) {\n        this.rotateMatrix(rotate);\n\n        if (this.field[row][column] > 0\n          && (this.field[row][column] === this.field[row - 1][column]\n          || this.field[row - 1][column] === 0)) {\n          can = true;\n        }\n        this.rotateMatrix(back);\n      }\n    }\n\n    if (can) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nconst game = new Game();\n\ngame.initGame();\n"]}